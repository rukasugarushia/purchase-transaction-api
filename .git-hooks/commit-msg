#!/usr/bin/env bash

printf "Running git-hooks/commit-msg... \n\n"

RED=$(tput setaf 1)

. "${BASH_SOURCE%/*}"/master-no-no
if [[ $? == 1 ]]
then
  exit 1
fi

# Read the commit message from the file
commit_msg=$(cat "$1")

# Check if the commit message starts with a conventional commit prefix and contains a Jira issue key
# chore: Changes to the build process or auxiliary tools and libraries such as documentation generation
# build: Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)
# ci: Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs)
# docs: Documentation only changes
# feat: A new feature
# fix: A bug fix
# perf: A code change that improves performance
# refactor: A code change that neither fixes a bug nor adds a feature
# style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)
# test: Adding missing tests or correcting existing tests
# revert: If the commit reverts a previous commit
if ! [[ $commit_msg =~ ^(build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test)\((FEAT)-[0-9]+\):.* ]]; then
  >&2 echo "${RED}ERROR! Conventional commit prefix or Jira key not found."
  >&2 echo "Your commit message should be like:"
  >&2 echo "build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test(REC-123): my beautiful commit message"
  >&2 echo "for more details check: https://www.conventionalcommits.org/"
  exit 1
fi

exit 0